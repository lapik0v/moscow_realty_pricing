import io
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.graph_objs as go
from sklearn.preprocessing import LabelEncoder

def load_models():
    rf_model1 = joblib.load('models/randomforest1.sav')
    rf_model2 = joblib.load('models/randomforest2.sav')
    gb_model1 = joblib.load('models/gradientboosting1.sav')
    gb_model2 = joblib.load('models/gradientboosting2.sav')
    xgb_model1 = joblib.load('models/xgboost1.sav')
    xgb_model2 = joblib.load('models/xgboost2.sav')
    cb_model1 = joblib.load('models/catboost1.sav')
    cb_model2 = joblib.load('models/catboost2.sav')
    return rf_model1,rf_model2,gb_model1,gb_model2,xgb_model1,xgb_model2,cb_model1,cb_model2

def feature_encoding(data, features):
    le = LabelEncoder()
    for feature in features:
        le.fit(data[feature])
        data[feature] = le.transform(data[feature])
    return data

building_series = ['','–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç','1-447','1-464','1-510','1-511','1-515','1-515/9–ú','1-515/9–Æ–õ','124-124-1','1605-–ê','1605-–ê–ú','1–ú–ì-601',
'II-05','II-07','II-08','II-14','II-17','II-18','II-18-01/12','II-18-02/12','II-18-31/12','II-18-31/12–ê','II-29','II-29-41/37','II-32','II-49','II-49–î','II-57','II-68-01','ii-68',
 '–ë–∞—à–Ω—è –í—É–ª—ã—Ö–∞','–ì–ú–°-1','–ò-155','–ò-155–ú–ö','–ò-1782/1','–ò-209','–ò-209–ê','–ò-522–ê','–ò-580','–ò-700','–ò-700–ê','–ò–ü-46–°',
 '–ö-7','–ö–û–ü–≠','–ö–û–ü–≠ –ü–∞—Ä—É—Å','–ú–≠–°-84','–ü-111–ú','–ü-22','–ü-3','–ü-30','–ü-31','–ü-3–ú','–ü-42','–ü-43','–ü-44','–ü-44–ö','–ü-44–ú','–ü-44–¢','–ü-44–¢–ú','–ü-46','–ü-46–ú','–ü-47','–ü-55','–ü-55–ú','–ü–î-4']

devs = ['','–ê–ì–†–û–°–¢–†–û–ô', 'Valartis Group', '–ö–û–†–¢–†–û–°', '–†–ì-–î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç', '–ë—ç—Å—Ç–∫–æ–Ω', '–î–æ—Ö–æ–¥–Ω—ã–π –¥–æ–º', '494 –£–ù–†', 'KR Properties', '–°–ó –ü–†–û–ì–†–ï–°–°', '–°–ó –í–≠–õ–õ–ë–ò', 'Stenoy', 'Capital Group', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', '–ù–ò–ò–ú–æ—Å—Å—Ç—Ä–æ–π', '3SGroup', '–ú–æ–Ω–ê—Ä—Ö', '–ü–ò–ö', '–ö–æ–ª–¥–∏ (Coldy)', 'St Michael', '–ï–≤—Ä–æ—Ñ–∞—Ä–º–∞–∫–æ–ª', 'GloraX', '–†–ö–° –î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç', '–ì–ö –ù–æ–≤–∞—è –ñ–∏–∑–Ω—å', '–ì–ö –ú–ò–¶', '–ì–ª–∞–≤—Å—Ç—Ä–æ–π', 'Apsis Globe', 'Level Group', '–î–û–ù–°–¢–†–û–ô', 'Hutton Development', '–°–ó –°–ø–∞—Ä—Ç–∞–∫', '–ê101', '–°–ó –ú–∏–Ω—Å–∫–∏–µ —Ö–æ–ª–º—ã', 'Glincom', 'ENGEO Development', '–ö–æ–Ω—Ü–µ—Ä–Ω –†–£–°–ò–ß', '–ê–±—Å–æ–ª—é—Ç –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'Touch', '–î–°–ö-1', '–ö–æ–Ω—Ü–µ—Ä–Ω –ö–†–û–°–¢', '–î-–ò–Ω–≤–µ—Å—Ç', '–≠.–ö. –î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç', '–ì—Ä—É–ø–ø–∞ –°–∞–º–æ–ª–µ—Ç', 'Seven Suns Development', '–¢–∞—à–∏—Ä', '–ì—Ä—É–ø–ø–∞ –≠—Ç–∞–ª–æ–Ω', 'TEKTA GROUP', '–°–ó –¢–ü–£ –†–∞—Å—Å–∫–∞–∑–æ–≤–∫–∞', '–ì–ö –§–°–ö', '–ì–ö –ò–Ω–≥—Ä–∞–¥', 'MR Group', '–í–µ–ª–µ—Å—Å—Ç—Ä–æ–π', 'UDS', 'VESPER', '–ì—Ä—É–ø–ø–∞ –ê–∫–≤–∏–ª–æ–Ω', '–ù–æ–≤—ã–µ –í–∞—Ç—É—Ç–∏–Ω–∫–∏', 'Lexion Development', 'AFI Development', 'Optima Development', 'Sminex-–ò–Ω—Ç–µ–∫–æ', '–ì–ö –û—Å–Ω–æ–≤–∞', '–°–ü–ï–¶–°–¢–†–û–ô-1', '–¶–µ–Ω—Ç—Ä-–ò–Ω–≤–µ—Å—Ç', 'Upside Development', '–ì—Ä—É–ø–ø–∞ –†–æ–¥–∏–Ω–∞', '–≠–ó–ö–°', '–°–ó –ó–≤–µ–∑–¥–Ω—ã–π', '–°–ó –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å', '–ì—Ä—É–ø–ø–∞ –õ–°–†', 'AB Development', 'Sezar Group']

state_districts = {'': ['']
                ,'–í–ê–û': ['','–ë–æ–≥–æ—Ä–æ–¥—Å–∫–æ–µ','–í–µ—à–Ω—è–∫–∏','–í–æ—Å—Ç–æ—á–Ω–æ–µ –ò–∑–º–∞–π–ª–æ–≤–æ','–í–æ—Å—Ç–æ—á–Ω—ã–π','–ì–æ–ª—å—è–Ω–æ–≤–æ','–ò–≤–∞–Ω–æ–≤—Å–∫–æ–µ','–ò–∑–º–∞–π–ª–æ–≤–æ','–ö–æ—Å–∏–Ω–æ-–£—Ö—Ç–æ–º—Å–∫–∏–π','–ú–µ—Ç—Ä–æ–≥–æ—Ä–æ–¥–æ–∫','–ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ',
                            '–ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ','–ü–µ—Ä–æ–≤–æ','–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–æ–µ','–°–µ–≤–µ—Ä–Ω–æ–µ –ò–∑–º–∞–π–ª–æ–≤–æ','–°–æ–∫–æ–ª–∏–Ω–∞—è –≥–æ—Ä–∞','–°–æ–∫–æ–ª—å–Ω–∏–∫–∏']
                ,'–ó–ê–û': ['','–í–Ω—É–∫–æ–≤–æ','–î–æ—Ä–æ–≥–æ–º–∏–ª–æ–≤–æ','–ö—Ä—ã–ª–∞—Ç—Å–∫–æ–µ','–ö—É–Ω—Ü–µ–≤–æ','–ú–æ–∂–∞–π—Å–∫–∏–π','–ù–æ–≤–æ-–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω–æ','–û—á–∞–∫–æ–≤–æ-–ú–∞—Ç–≤–µ–µ–≤—Å–∫–æ–µ','–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ','–†–∞–º–µ–Ω–∫–∏','–°–æ–ª–Ω—Ü–µ–≤–æ',
                        '–¢—Ä–æ–ø–∞—Ä–µ–≤–æ-–ù–∏–∫—É–ª–∏–Ω–æ','–§–∏–ª–µ–≤—Å–∫–∏–π –ø–∞—Ä–∫','–§–∏–ª–∏-–î–∞–≤—ã–¥–∫–æ–≤–æ']
                ,'–ó–µ–ª–ê–û': ['','–ö—Ä—é–∫–æ–≤–æ','–ú–∞—Ç—É—à–∫–∏–Ω–æ','–°–∞–≤—ë–ª–∫–∏','–°–∏–ª–∏–Ω–æ','–°—Ç–∞—Ä–æ–µ –ö—Ä—é–∫–æ–≤–æ']
                ,'–ù–ê–û(–ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π)': ['','–í–Ω—É–∫–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–î–µ—Å–µ–Ω–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ö–æ–∫–æ—à–∫–∏–Ω–æ –¥–ø','–ö–æ–º–º—É–Ω–∞—Ä–∫–∞ –ø–æ—Å–µ–ª–æ–∫','–ú–∞—Ä—É—à–∫–∏–Ω—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ú–æ—Å–∫–æ–≤—Å–∫–∏–π','–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø–æ—Å–µ–ª–µ–Ω–∏–µ',
                        '–ú–æ—Å—Ä–µ–Ω—Ç–≥–µ–Ω –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–°–æ—Å–µ–Ω—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–§–∏–ª–∏–º–æ–Ω–∫–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–©–µ—Ä–±–∏–Ω–∫–∞']
                ,'–°–ê–û': ['','–ê—ç—Ä–æ–ø–æ—Ä—Ç','–ë–µ–≥–æ–≤–æ–π','–ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤—Å–∫–∏–π','–í–æ–π–∫–æ–≤—Å–∫–∏–π','–í–æ—Å—Ç–æ—á–Ω–æ–µ –î–µ–≥—É–Ω–∏–Ω–æ','–ì–æ–ª–æ–≤–∏–Ω—Å–∫–∏–π','–î–º–∏—Ç—Ä–æ–≤—Å–∫–∏–π','–ó–∞–ø–∞–¥–Ω–æ–µ –î–µ–≥—É–Ω–∏–Ω–æ','–ö–æ–ø—Ç–µ–≤–æ','–õ–µ–≤–æ–±–µ—Ä–µ–∂–Ω—ã–π','–ú–æ–ª–∂–∞–Ω–∏–Ω–æ–≤—Å–∫–∏–π',
                        '–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π','–°–æ–∫–æ–ª','–¢–∏–º–∏—Ä—è–∑–µ–≤—Å–∫–∏–π','–•–æ–≤—Ä–∏–Ω–æ','–•–æ—Ä–æ—à–µ–≤—Å–∫–∏–π']
                ,'–°–í–ê–û': ['','–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π','–ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π','–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∏–π','–ë–∏–±–∏—Ä–µ–≤–æ','–ë—É—Ç—ã—Ä—Å–∫–∏–π','–õ–∏–∞–Ω–æ–∑–æ–≤–æ','–õ–æ—Å–∏–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π','–ú–∞—Ä—Ñ–∏–Ω–æ','–ú–∞—Ä—å–∏–Ω–∞ —Ä–æ—â–∞','–û—Å—Ç–∞–Ω–∫–∏–Ω—Å–∫–∏–π','–û—Ç—Ä–∞–¥–Ω–æ–µ','–†–æ—Å—Ç–æ–∫–∏–Ω–æ',
                        '–°–≤–∏–±–ª–æ–≤–æ','–°–µ–≤–µ—Ä–Ω–æ–µ –ú–µ–¥–≤–µ–¥–∫–æ–≤–æ','–°–µ–≤–µ—Ä–Ω—ã–π','–Æ–∂–Ω–æ–µ –ú–µ–¥–≤–µ–¥–∫–æ–≤–æ','–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∏–π']
                ,'–°–ó–ê–û': ['','–ö—É—Ä–∫–∏–Ω–æ','–ú–∏—Ç–∏–Ω–æ','–ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ','–°–µ–≤–µ—Ä–Ω–æ–µ –¢—É—à–∏–Ω–æ','–°—Ç—Ä–æ–≥–∏–Ω–æ','–•–æ—Ä–æ—à–µ–≤–æ-–ú–Ω–µ–≤–Ω–∏–∫–∏','–©—É–∫–∏–Ω–æ','–Æ–∂–Ω–æ–µ –¢—É—à–∏–Ω–æ']
                ,'–¢–ê–û(–¢—Ä–æ–∏—Ü–∫–∏–π)': ['','–í–æ—Ä–æ–Ω–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ö–∏–µ–≤—Å–∫–∏–π —Ä–ø','–ö–ª–µ–Ω–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ö—Ä–∞—Å–Ω–æ–ø–∞—Ö–æ—Ä—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ú–∏—Ö–∞–π–ª–æ–≤–æ-–Ø—Ä—Ü–µ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ù–æ–≤–æ—Ñ–µ–¥–æ—Ä–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ',
                        '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ','–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–æ–µ –ø–æ—Å–µ–ª–æ–∫','–†–æ–≥–æ–≤–æ –ø–æ—Å–µ–ª–æ–∫','–¢—Ä–æ–∏—Ü–∫','–©–∞–ø–æ–≤—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ']
                ,'–¶–ê–û': ['','–ê—Ä–±–∞—Ç','–ë–∞—Å–º–∞–Ω–Ω—ã–π','–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ','–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π','–ú–µ—â–∞–Ω—Å–∫–∏–π','–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π','–¢–∞–≥–∞–Ω—Å–∫–∏–π','–¢–≤–µ—Ä—Å–∫–æ–π','–•–∞–º–æ–≤–Ω–∏–∫–∏','–Ø–∫–∏–º–∞–Ω–∫–∞']
                ,'–Æ–ê–û': ['','–ë–∏—Ä—é–ª–µ–≤–æ –í–æ—Å—Ç–æ—á–Ω–æ–µ','–ë–∏—Ä—é–ª–µ–≤–æ –ó–∞–ø–∞–¥–Ω–æ–µ','–ë—Ä–∞—Ç–µ–µ–≤–æ','–î–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π','–î–æ–Ω—Å–∫–æ–π','–ó—è–±–ª–∏–∫–æ–≤–æ','–ú–æ—Å–∫–≤–æ—Ä–µ—á—å–µ-–°–∞–±—É—Ä–æ–≤–æ','–ù–∞–≥–∞—Ç–∏–Ω–æ-–°–∞–¥–æ–≤–Ω–∏–∫–∏','–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –∑–∞—Ç–æ–Ω',
                        '–ù–∞–≥–æ—Ä–Ω—ã–π','–û—Ä–µ—Ö–æ–≤–æ-–ë–æ—Ä–∏—Å–æ–≤–æ –°–µ–≤–µ—Ä–Ω–æ–µ','–û—Ä–µ—Ö–æ–≤–æ-–ë–æ—Ä–∏—Å–æ–≤–æ –Æ–∂–Ω–æ–µ','–¶–∞—Ä–∏—Ü—ã–Ω–æ','–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –°–µ–≤–µ—Ä–Ω–æ–µ','–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ','–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ –Æ–∂–Ω–æ–µ']
                ,'–Æ–í–ê–û': ['','–í—ã—Ö–∏–Ω–æ-–ñ—É–ª–µ–±–∏–Ω–æ','–ö—É–∑—å–º–∏–Ω–∫–∏','–õ–µ—Ñ–æ—Ä—Ç–æ–≤–æ','–õ—é–±–ª–∏–Ω–æ','–ú–∞—Ä—å–∏–Ω–æ','–ù–µ–∫—Ä–∞—Å–æ–≤–∫–∞','–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π','–ü–µ—á–∞—Ç–Ω–∏–∫–∏','–†—è–∑–∞–Ω—Å–∫–∏–π','–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏','–Æ–∂–Ω–æ–ø–æ—Ä—Ç–æ–≤—ã–π']
                ,'–Æ–ó–ê–û': ['','–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π','–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π','–ó—é–∑–∏–Ω–æ','–ö–æ–Ω—å–∫–æ–≤–æ','–ö–æ—Ç–ª–æ–≤–∫–∞','–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∏–π','–û–±—Ä—É—á–µ–≤—Å–∫–∏–π','–°–µ–≤–µ—Ä–Ω–æ–µ –ë—É—Ç–æ–≤–æ','–¢–µ–ø–ª—ã–π –°—Ç–∞–Ω','–ß–µ—Ä–µ–º—É—à–∫–∏','–Æ–∂–Ω–æ–µ –ë—É—Ç–æ–≤–æ','–Ø—Å–µ–Ω–µ–≤–æ']}

rf_model1,rf_model2,gb_model1,gb_model2,xgb_model1,xgb_model2,cb_model1,cb_model2 = load_models()
scores1 = [0.8, 0.75, 0.85, 0.8]
scores2 = [0.75, 0.8, 0.9, 0.9]


st.set_page_config(
        page_icon="üè†",
        page_title="–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω",
)
st.title('–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω')
realty_type = st.radio("*–†—ã–Ω–æ–∫",('–ü–µ—Ä–≤–∏—á–Ω—ã–π', '–í—Ç–æ—Ä–∏—á–Ω—ã–π'))

if realty_type == '–í—Ç–æ—Ä–∏—á–Ω—ã–π':
    state = st.selectbox('*–û–∫—Ä—É–≥',(state_districts.keys()))
    district = st.selectbox('*–†–∞–π–æ–Ω',state_districts[state])
    rooms = st.selectbox('*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
         ('','–°—Ç—É–¥–∏—è', '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '5-–∫–æ–º–Ω–∞—Ç–Ω–∞—è','–ú–Ω–æ–≥–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è'))
    square = st.slider("*–ü–ª–æ—â–∞–¥—å (–º2)", 10, 250,value=50)
    metrotime = st.slider("*–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–ø–µ—à–∫–æ–º, –º–∏–Ω)", 0, 90,value=10)
    live_type = st.radio("*–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è",('–ñ–∏–ª–æ–µ', '–ù–µ–∂–∏–ª–æ–µ'))
    buildyear = st.slider("*–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", 1900, 2023,value=2023)
    etage = st.slider("*–≠—Ç–∞–∂", 1, 80,value=1)
    etage_num = st.slider("*–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", 1, 80,value=1)

    additional1 = st.checkbox("–£–∫–∞–∑–∞—Ç—å –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ")
    if additional1:
        live_sq = st.slider("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–º2)", 0, square,value=0)
        kitchen_sq = st.slider("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–º2)", 0, square//2,value=0)
        plan = st.selectbox('–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
             ('','–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–°–º–µ–∂–Ω–∞—è', '–°–º–µ–∂–Ω–æ-–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'))
        height = st.slider("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–∞ (–º)", 2.40, 8.0,value=2.70,step=0.05)
        wc = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤", 1, 4,value=1)
        balcon = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤/–ª–æ–¥–∂–∏–π", 0, 8,value=0)
        view = st.selectbox('–í–∏–¥ –∏–∑ –æ–∫–æ–Ω',
             ('','–í–æ –¥–≤–æ—Ä', '–ù–∞ —É–ª–∏—Ü—É', '–ù–∞ —É–ª–∏—Ü—É –∏ –¥–≤–æ—Ä'))
        repair = st.selectbox('–†–µ–º–æ–Ω—Ç',
             ('','–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞', '–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π', '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç', '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π'))
        problem = st.selectbox('–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏—è',
             ('','–ù–µ—Ç', '–ê—Ä–µ—Å—Ç', '–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ò–ø–æ—Ç–µ–∫–∞', '–ó–∞–ø—Ä–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'))
        owner = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", 1, 10,value=1)
    else:
        live_sq,kitchen_sq,plan,height,wc,balcon,view,repair,problem,owner = 0,0,'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',0,1,0,'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ—Ç',1

    additional2 = st.checkbox("–£–∫–∞–∑–∞—Ç—å –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ")
    if additional2:
        buildserie = st.selectbox('–°–µ—Ä–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',building_series)
        wall_material = st.selectbox('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω',
             ('','–ë–ª–æ—á–Ω—ã–π', '–ö–∏—Ä–ø–∏—á–Ω—ã–π', '–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ –∫–∏—Ä–ø–∏—á–Ω—ã–π', '–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', '–ü–∞–Ω–µ–ª—å–Ω—ã–π'))
        floor_material = st.selectbox('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π',
             ('','–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ', '–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ', '–°–º–µ—à–∞–Ω–Ω—ã–µ'))
        thrash = st.selectbox('–ú—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥',
             ('','–ï—Å—Ç—å', '–ù–µ—Ç'))
        heating = st.selectbox('–û—Ç–æ–ø–ª–µ–Ω–∏–µ',
             ('','–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∫–æ—Ç–µ–ª—å–Ω–∞—è', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–µ–ø–ª–æ–≤–æ–π –ø—É–Ω–∫—Ç', '–ö–æ—Ç–µ–ª/–ö–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ'
             ,'–ù–µ—Ç','–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ'))
    else:
        buildserie,wall_material,floor_material,thrash,heating = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
else:
    state = st.selectbox('*–û–∫—Ä—É–≥',(state_districts.keys()))
    district = st.selectbox('*–†–∞–π–æ–Ω',state_districts[state])
    rooms = st.selectbox('*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
         ('','–°—Ç—É–¥–∏—è', '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '5-–∫–æ–º–Ω–∞—Ç–Ω–∞—è','–ú–Ω–æ–≥–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è'))
    square = st.slider("*–ü–ª–æ—â–∞–¥—å (–º2)", 10, 250,value=50)
    metrotime = st.slider("*–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (–ø–µ—à–∫–æ–º, –º–∏–Ω)", 0, 90,value=10)
    live_type = st.radio("*–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è",('–ñ–∏–ª–æ–µ', '–ù–µ–∂–∏–ª–æ–µ'))
    ready = st.radio("*–°–¥–∞–Ω/–Ω–µ —Å–¥–∞–Ω",('–°–¥–∞–Ω', '–ù–µ —Å–¥–∞–Ω'))
    if ready != "–°–¥–∞–Ω":
        buildyear = st.slider("*–ì–æ–¥ —Å–¥–∞—á–∏", 2023, 2030,value=2023)
    else:
        buildyear = st.slider("*–ì–æ–¥ —Å–¥–∞—á–∏", 2018, 2023,value=2023)
    etage = st.slider("*–≠—Ç–∞–∂", 1, 80,value=1)
    etage_num = st.slider("*–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", 1, 80,value=1)

    additional1 = st.checkbox("–£–∫–∞–∑–∞—Ç—å –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ")
    if additional1:
        live_sq = st.slider("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–º2)", 0, square,value=0)
        kitchen_sq = st.slider("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–º2)", 0, square//2,value=0)
        height = st.slider("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–∞ (–º)", 2.40, 8.0,value=3.0,step=0.05)
        wc = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤", 1, 4,value=1)
        balcon = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤/–ª–æ–¥–∂–∏–π", 0, 8,value=0)
        view = st.selectbox('–í–∏–¥ –∏–∑ –æ–∫–æ–Ω',
             ('','–í–æ –¥–≤–æ—Ä', '–ù–∞ —É–ª–∏—Ü—É', '–ù–∞ —É–ª–∏—Ü—É –∏ –¥–≤–æ—Ä'))
        repair = st.selectbox('–û—Ç–¥–µ–ª–∫–∞',
             ('','–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', '–ß–∏—Å—Ç–æ–≤–∞—è', '–ü—Ä–µ–¥—á–∏—Å—Ç–æ–≤–∞—è', '–ß–µ—Ä–Ω–æ–≤–∞—è', '–ß–∏—Å—Ç–æ–≤–∞—è —Å –º–µ–±–µ–ª—å—é', '–° –æ—Ç–¥–µ–ª–∫–æ–π'))
    else:
        live_sq,kitchen_sq,height,wc,balcon,view,repair = 0,0,0,1,0,'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    additional2 = st.checkbox("–£–∫–∞–∑–∞—Ç—å –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ")
    if additional2:
        developer = st.selectbox('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫',devs)
        wall_material = st.selectbox('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω',
             ('','–ö–∏—Ä–ø–∏—á–Ω—ã–π', '–ú–æ–Ω–æ–ª–∏—Ç–Ω–æ-–∫–∏—Ä–ø–∏—á–Ω—ã–π', '–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π', '–ü–∞–Ω–µ–ª—å–Ω—ã–π'))
        buildclass = st.selectbox('–ö–ª–∞—Å—Å –ñ–ö',
             ('','–ë–∏–∑–Ω–µ—Å', '–ö–æ–º—Ñ–æ—Ä—Ç', '–ü—Ä–µ–º–∏—É–º', '–≠–∫–æ–Ω–æ–º'))
        parking = st.selectbox('–ü–∞—Ä–∫–æ–≤–∫–∞',
             ('','–ü–æ–¥–∑–µ–º–Ω–∞—è', '–û—Ç–∫—Ä—ã—Ç–∞—è','–ù–∞–∑–µ–º–Ω–∞—è', '–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è'))
    else:
        developer,wall_material,buildclass,parking = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

result = st.button('–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É')
if result:
    if realty_type == '–í—Ç–æ—Ä–∏—á–Ω—ã–π':
        if (state != '')&(district != '')&(rooms != ''):
            if additional1:
                if plan == '':
                    plan = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if view == '':
                    view = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if repair == '':
                    repair = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if problem == '':
                    repair = '–ù–µ—Ç'
            if additional2:
                if buildserie == '':
                    buildserie = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if wall_material == '':
                    wall_material = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if floor_material == '':
                    floor_material = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if thrash == '':
                    thrash = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if heating == '':
                    heating = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            input = {'–û–∫—Ä—É–≥':[state],'–†–∞–π–æ–Ω':[district],
                     '–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç':[rooms],'–ü–ª–æ—â–∞–¥—å':[square],'–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ':[metrotime],
                     '–ñ–∏–ª–æ–µ/–Ω–µ–∂–∏–ª–æ–µ':[live_type],'–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏':[buildyear],'–≠—Ç–∞–∂':[etage],'–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞':[etage_num],

                     '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å':[live_sq],'–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏':[kitchen_sq],'–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞':[plan],
                     '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤':[height],'–°–∞–Ω—É–∑–µ–ª':[wc],'–ö–æ–ª-–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤':[balcon],'–í–∏–¥ –∏–∑ –æ–∫–æ–Ω':[view],
                     '–†–µ–º–æ–Ω—Ç':[repair],'–û–±—Ä–µ–º–µ–Ω–µ–Ω–∏—è':[problem],'–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤':[owner],

                     '–°–µ—Ä–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞':[buildserie],'–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω':[wall_material],'–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–∞':[floor_material],
                     '–ú—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥':[thrash],'–û—Ç–æ–ø–ª–µ–Ω–∏–µ':[heating]}
            X = pd.DataFrame(input)
            data = pd.read_pickle("data2.pkl")
            features = data.select_dtypes(include=['object']).columns.tolist()
            X = feature_encoding(pd.concat([data.loc[:, '–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç':'–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞'],X]), features)[-1:]
            preds = [rf_model2.predict(X)[0],gb_model2.predict(X)[0],
                     xgb_model2.predict(X)[0],cb_model2.predict(X)[0]]
            preds = [min(preds),sum([preds[i]*(scores1[i]/sum(scores1)) for i in range(len(scores1))]),max(preds)]
            round_preds = [round(i / 1000000,1) for i in preds]
        else:
            st.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è! (*)')
    else:
        if (state != '')&(district != '')&(rooms != ''):
            if additional1:
                if repair == '':
                    repair = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if view == '':
                    view = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            if additional2:
                if developer == '':
                    developer = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if wall_material == '':
                    wall_material = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if buildclass == '':
                    buildclass = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if parking == '':
                    parking = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            input = {'–û–∫—Ä—É–≥':[state],'–†–∞–π–æ–Ω':[district],
                     '–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç':[rooms],'–ü–ª–æ—â–∞–¥—å':[square],'–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ':[metrotime],
                     '–ñ–∏–ª–æ–µ/–Ω–µ–∂–∏–ª–æ–µ':[live_type],'–°–¥–∞–Ω/–Ω–µ —Å–¥–∞–Ω':["–ù–µ —Å–¥–∞–Ω"],'–ì–æ–¥ —Å–¥–∞—á–∏':[buildyear],
                     '–≠—Ç–∞–∂':[etage],'–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞':[etage_num],

                     '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å':[live_sq],'–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏':[kitchen_sq],
                     '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤':[height],'–°–∞–Ω—É–∑–µ–ª':[wc],'–ö–æ–ª-–≤–æ –±–∞–ª–∫–æ–Ω–æ–≤':[balcon],'–í–∏–¥ –∏–∑ –æ–∫–æ–Ω':[view],
                     '–û—Ç–¥–µ–ª–∫–∞':[repair],'–ü–∞—Ä–∫–æ–≤–∫–∞':[parking],

                     '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω':[wall_material],'–ö–ª–∞—Å—Å':[buildclass],
                     '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫':[developer]}
            X = pd.DataFrame(input)
            data = pd.read_pickle("data1.pkl")
            features = data.select_dtypes(include=['object']).columns.tolist()
            X = feature_encoding(pd.concat([data.loc[:, '–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç':'–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –¥–æ–º–∞'],X]), features)[-1:]
            preds = [rf_model1.predict(X)[0],gb_model1.predict(X)[0],
                     xgb_model1.predict(X)[0],cb_model1.predict(X)[0]]
            preds = [min(preds),sum([preds[i]*(scores1[i]/sum(scores1)) for i in range(len(scores1))]),max(preds)]
            round_preds = [round(i / 1000000,1) for i in preds]
        else:
            st.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è! (*)')

    st.write('**–†–µ–∑—É–ª—å—Ç–∞—Ç:**')

    fig = go.Figure(go.Bar(y=[''], x=[round_preds[0]], orientation='h',
                marker=dict(color="rgba(0,0,0,0.1)")))
    fig.add_trace(go.Bar(y=[''], x=[round_preds[2]], orientation='h',
                marker=dict(color='rgba(255,75,75,0.6)')))
    fig.add_trace(go.Bar(y=[''], x=[round_preds[0]], orientation='h',
                marker=dict(color="rgba(0,0,0,0.1)")))

    fig.add_vline(x=round_preds[0], line_width=2, line_color="black",
                 annotation_text=str(round_preds[0])+' –º–ª–Ω –†', annotation_position="bottom")
    fig.add_vline(x=(round_preds[2]*((round_preds[1]-round_preds[0])/(round_preds[2]-round_preds[0]))+round_preds[0]),
                 line_width=1, line_color="black", opacity=1,
                 annotation=dict(font_size=16, font_family="Arial"),
                 annotation_text='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: \n<b>'+str(round_preds[1])+' –º–ª–Ω –†</b>', annotation_position="top")
    fig.add_vline(x=round_preds[2]+round_preds[0], line_width=2, line_color="black",
                 annotation_text=str(round_preds[2])+' –º–ª–Ω –†', annotation_position="bottom")

    fig.update_layout(barmode='stack',template='simple_white',showlegend=False,width=750,height=225,
                     yaxis_visible=False,xaxis_visible=False)
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
